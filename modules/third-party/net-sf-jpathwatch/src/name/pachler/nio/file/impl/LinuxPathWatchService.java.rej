***************
*** 1,3 ****
  /*
   * Copyright 2008-2011 Uwe Pachler
   *
--- 1,4 ----
+ /* @generated */
  /*
   * Copyright 2008-2011 Uwe Pachler
   *
***************
*** 28,33 ****
  import java.io.IOException;
  import java.util.HashMap;
  import java.util.HashSet;
  import java.util.LinkedList;
  import java.util.Map;
  import java.util.Map.Entry;
--- 29,35 ----
  import java.io.IOException;
  import java.util.HashMap;
  import java.util.HashSet;
+ import java.util.Iterator;
  import java.util.LinkedList;
  import java.util.Map;
  import java.util.Map.Entry;
***************
*** 441,455 ****
  			throw new ClosedWatchServiceException();
  		int wd = -1;
  
- 		for(Entry<Integer,LinuxPathWatchKey> entry : keys.entrySet())
- 		{
  			if(entry.getValue() == pathWatchKey)
  			{
  				wd = entry.getKey().intValue();
  				if((pathWatchKey.getFlags() & FLAG_FILTER_KEY_INVALID) != 0)
  					inotifyEventHandler(wd, IN_IGNORED, 0, null);
  				pathWatchKey.invalidate();
- 				keys.remove(entry.getKey());
  				break;
  			}
  		}
--- 443,462 ----
  			throw new ClosedWatchServiceException();
  		int wd = -1;
  
+ 		Set<Entry<Integer,LinuxPathWatchKey>> entrySet = keys.entrySet();
+ 
+ 		Iterator<Entry<Integer,LinuxPathWatchKey>> iterator = entrySet.iterator();
+ 
+ 		while(iterator.hasNext()) {
+ 			Entry<Integer,LinuxPathWatchKey> entry = iterator.next();
+ 
  			if(entry.getValue() == pathWatchKey)
  			{
  				wd = entry.getKey().intValue();
  				if((pathWatchKey.getFlags() & FLAG_FILTER_KEY_INVALID) != 0)
  					inotifyEventHandler(wd, IN_IGNORED, 0, null);
  				pathWatchKey.invalidate();
+ 				iterator.remove();
  				break;
  			}
  		}
