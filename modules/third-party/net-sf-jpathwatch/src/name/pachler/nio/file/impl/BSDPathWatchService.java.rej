***************
*** 1,3 ****
  /*
   * Copyright 2008-2011 Uwe Pachler
   *
--- 1,4 ----
+ /* @generated */
  /*
   * Copyright 2008-2011 Uwe Pachler
   *
***************
*** 27,34 ****
  import java.io.IOException;
  import java.util.HashMap;
  import java.util.HashSet;
  import java.util.LinkedList;
  import java.util.Map;
  import java.util.Queue;
  import java.util.Set;
  import java.util.concurrent.TimeUnit;
--- 28,37 ----
  import java.io.IOException;
  import java.util.HashMap;
  import java.util.HashSet;
+ import java.util.Iterator;
  import java.util.LinkedList;
  import java.util.Map;
+ import java.util.Map.Entry;
  import java.util.Queue;
  import java.util.Set;
  import java.util.concurrent.TimeUnit;
***************
*** 175,181 ****
  		byte[] b = new byte[1];
  		write(closePipeWriteFd, b, 1);
  		synchronized(changeLock){
- 			boolean eventsAdded = cancelImpl(pathWatchKey);
  			if(eventsAdded)
  				queueKey(pathWatchKey);
  			
--- 178,184 ----
  		byte[] b = new byte[1];
  		write(closePipeWriteFd, b, 1);
  		synchronized(changeLock){
+ 			boolean eventsAdded = cancelImpl(pathWatchKey, true);
  			if(eventsAdded)
  				queueKey(pathWatchKey);
  			
***************
*** 185,191 ****
  		}
  	}
  
- 	private boolean cancelImpl(PathWatchKey pathWatchKey){
  		PathImpl pathImpl = (PathImpl)pathWatchKey.getPath();
  		String pathString = pathImpl.getFile().getPath();
  		Integer dirfdInteger = dirs.get(pathString);
--- 188,194 ----
  		}
  	}
  
+ 	private boolean cancelImpl(PathWatchKey pathWatchKey, boolean removeKey){
  		PathImpl pathImpl = (PathImpl)pathWatchKey.getPath();
  		String pathString = pathImpl.getFile().getPath();
  		Integer dirfdInteger = dirs.get(pathString);
***************
*** 220,226 ****
  		if((key.getFlags() & FLAG_FILTER_ENTRY_MODIFY) != 0)
  			--numKeysRequiringPolling;
  		
- 		keys.remove(dirfdInteger);
  		dirs.remove(pathString);
  		
  		return eventAdded;
--- 223,232 ----
  		if((key.getFlags() & FLAG_FILTER_ENTRY_MODIFY) != 0)
  			--numKeysRequiringPolling;
  		
+ 		if (removeKey) {
+ 			keys.remove(dirfdInteger);
+ 		}
+ 
  		dirs.remove(pathString);
  		
  		return eventAdded;
***************
*** 369,381 ****
  
  						// check if watch key has become invalid
  						if( (fflags & NOTE_DELETE)!=0 || (fflags & NOTE_REVOKE)!=0)
- 							eventsAdded = cancelImpl(key);
  						else{
  							try {
  								// poll key's directory
  								eventsAdded = key.poll();
  							} catch (FileNotFoundException ex) {
- 								eventsAdded = cancelImpl(key);
  							}
  						}
  						if(eventsAdded)
--- 375,387 ----
  
  						// check if watch key has become invalid
  						if( (fflags & NOTE_DELETE)!=0 || (fflags & NOTE_REVOKE)!=0)
+ 							eventsAdded = cancelImpl(key, true);
  						else{
  							try {
  								// poll key's directory
  								eventsAdded = key.poll();
  							} catch (FileNotFoundException ex) {
+ 								eventsAdded = cancelImpl(key, true);
  							}
  						}
  						if(eventsAdded)
***************
*** 383,389 ****
  					}
  				} else if(numKeysRequiringPolling > 0){
  					// if we timed out and we have keys that need to be polled
- 					for(PollingPathWatchKey key : keys.values()){
  						// only poll keys that have the modification flag set -
  						// CREATE/DELETE are flagged in kevent
  						if((key.getFlags() & FLAG_FILTER_ENTRY_MODIFY) == 0)
--- 389,404 ----
  					}
  				} else if(numKeysRequiringPolling > 0){
  					// if we timed out and we have keys that need to be polled
+                     
+ 					Set<Entry<Integer, PollingPathWatchKey>> entrySet = keys.entrySet();
+ 
+ 					Iterator<Entry<Integer, PollingPathWatchKey>> iterator = entrySet.iterator();
+                     
+ 					while(iterator.hasNext()) {
+ 						Entry<Integer, PollingPathWatchKey> entry = iterator.next();
+ 
+ 						PollingPathWatchKey key = entry.getValue();
+                         
  						// only poll keys that have the modification flag set -
  						// CREATE/DELETE are flagged in kevent
  						if((key.getFlags() & FLAG_FILTER_ENTRY_MODIFY) == 0)
***************
*** 392,398 ****
  						try {
  							eventsAdded = key.poll();
  						} catch (FileNotFoundException ex) {
- 							eventsAdded = cancelImpl(key);
  						}
  						if(eventsAdded)
  							queueKey(key);
--- 407,415 ----
  						try {
  							eventsAdded = key.poll();
  						} catch (FileNotFoundException ex) {
+ 							eventsAdded = cancelImpl(key, false);
+                             
+ 							iterator.remove();
  						}
  						if(eventsAdded)
  							queueKey(key);
